dask_cuda_worker_options = [
	{
	'arg': 'host',
	'type': str,
	'options': None,
	'default': None,
	'description': "IP address of serving host; should be visible to the scheduler and other workers. Can be a string (like ``\"127.0.0.1\"``) or ``None`` to fall back on the address of the interface specified by ``--interface`` or the default interface.",
	},
	{
	'arg': 'nthreads',
	'type': int,
	'options': None,
	'default': 1,
	'description': "Number of threads to be used for each Dask worker process.  [default: 1]",
	},
	{
	'arg': 'name',
	'type': str,
	'options': None,
	'default': None,
	'description': "A unique name for the worker. Can be a string (like ``\"worker-1\"``) or ``None`` for a nameless worker.",
	},
	{
	'arg': 'memory-limit',
	'type': str,
	'options': None,
	'default': 'auto',
	'description': "Bytes of memory per process that the worker can use. Can be an integer (bytes), float (fraction of total system memory), string (like ``\"5GB\"`` or ``\"5000M\"``), or ``\"auto\"`` or 0 for no memory management. [default: auto]",
	},
	{
	'arg': 'device-memory-limit',
	'type': str,
	'options': None,
	'default': '0.8',
	'description': "Size of the CUDA device LRU cache, which is used to determine when the worker starts spilling to host memory. Can be an integer spilling to host memory. Can be an integer (bytes), float (fraction of total device memory), string (like ``\"5GB\"`` or ``\"5000M\"``), or ``\"auto\"`` or 0 to disable spilling to host (i.e. allow full device memory usage).  [default: 0.8]",
	},
	{
	'arg': 'rmm-pool-size',
	'type': str,
	'options': None,
	'default': None,
	'description': "RMM pool size to initialize each worker with. Can be an integer (bytes), string (like ``\"5GB\"`` or ``\"5000M\"``), or ``None`` to disable RMM pools.\nnote::\nThis size is a per-worker configuration, and not cluster-wide.",
	},
	{
	'arg': 'rmm-maximum-pool-size',
	'type': str,
	'options': None,
	'default': None,
	'description': "When ``--rmm-pool-size`` is specified, this argument indicates the maximum pool size. Can be an integer (bytes), string (like ``\"5GB\"`` or ``\"5000M\"``) or ``None``. By default, the total available memory on the GPU is used. ``rmm_pool_size`` must be specified to use RMM pool and to set the maximum pool size.\n.. note::     This size is a per-worker configuration, and not cluster-wide.",
	},
	{
	'arg': ['rmm-managed-memory', 'no-rmm-managed-memory'],
	'type': 'binary',
	'options': None,
	'default': 'no-rmm-managed-memory',
	'description': "Initialize each worker with RMM and set it to use managed memory. If disabled, RMM may still be used by specifying ``--rmm-pool- size``.\n.. warning::     Managed memory is currently incompatible with NVLink. Trying to enable both will     result in failure.  [default:no-rmm-managed-memory]",
	},
	{
	'arg': ['rmm-async', 'no-rmm-async'],
	'type': 'binary',
	'options': None,
	'default': 'no-rmm-async',
	'description': "Initialize each worker withh RMM and set it to use RMM's asynchronous allocator. See ``rmm.mr.CudaAsyncMemoryResource`` for more info.\n.. warning::     The asynchronous allocator requires CUDA Toolkit 11.2 or newer. It is also     incompatible with RMM pools and managed memory, trying to enable both will result in failure.  [default: no-rmm-async]",
	},
	{
	'arg': 'rmm-log-directory',
	'type': str,
	'options': None,
	'default': None,
	'description': "Directory to write per-worker RMM log files to. The client and scheduler are not logged here. Can be a string (like ``\"/path/to/logs/\"``) or ``None`` to disable logging.\n.. note::     Logging will only be enabled if ``--rmm-pool-size`` or ``--rmm-managed-memory``     are specified.",
	},
	{
	'arg': ['rmm-track-allocations', 'no-rmm-track-allocations'],
	'type': 'binary',
	'options': None,
	'default': 'rmm-track-allocations',
	'description': "Track memory allocations made by RMM. If ``True``, wraps the memory resource of each worker with a ``rmm.mr.TrackingResourceAdaptor`` that allows querying the amount of memory allocated by RMM.  [default: no-rmm-track-allocations]",
	},
	{
	'arg': 'pid-file',
	'type': str,
	'options': None,
	'default': None,
	'description': "File to write the process PID.",
	},
	{
	'arg': 'resources',
	'type': str,
	'options': None,
	'default': None,
	'description': "Resources for task constraints like ``\"GPU=2 MEM=10e9\"``.",
	},
	{
	'arg': ['dashboard', 'no-dashboard'],
	'type': 'binary',
	'options': None,
	'default': 'dashboard',
	'description': "Launch the dashboard.  [default: dashboard]",
	},
	{
	'arg': 'dashboard-address',
	'type': str,
	'options': None,
	'default': '0',
	'description': "Relative address to serve the dashboard (if enabled).  [default: :0]",
	},
	{
	'arg': 'local-directory',
	'type': str,
	'options': None,
	'default': None,
	'description': "Path on local machine to store temporary files. Can be a string (like ``\"path/to/files\"``) or ``None`` to fall back on the value of ``dask.temporary-directory`` in the local Dask configuration, using the current working directory if this is not set.",
	},
	{
	'arg': ['shared-filesystem', 'no-shared-filesystem'],
	'type': 'binary',
	'options': None,
	'default': None,
	'description': "If `--shared-filesystem` is specified, inform JIT-Unspill that `local_directory` is   shared filesystem available for all workers, whereas `--no-shared-filesystem` informs it may not assume it's a shared filesystem. If neither is specified, JIT-Unspill will decide based on the Dask config value specified by `\"jit-unspill-shared-fs\"`. Notice, a shared filesystem must support the `os.link()` operation.",
	},
	{
	'arg': 'scheduler-file',
	'type': str,
	'options': None,
	'default': None,
	'description': "Filename to JSON encoded scheduler information. To be used in conjunction with the equivalent ``dask-scheduler`` option.",
	},
	{
	'arg': 'protocol',
	'type': str,
	'options': None,
	'default': None,
	'description': "Protocol like tcp, tls, or ucx",
	},
	{
	'arg': 'interface',
	'type': str,
	'options': None,
	'default': None,
	'description': "External interface used to connect to the scheduler. Usually an ethernet interface is used for connection, and not an InfiniBand interface (if one is available). Can be a string (like ``\"eth0\"`` for NVLink or ``\"ib0\"`` for InfiniBand) or ``None`` to fall back on the default interface.",
	},
	{
	'arg': 'preload',
	'type': str,
	'options': None,
	'default': None,
	'description': "Module that should be loaded by each worker process like ``\"foo.bar\"`` or ``\"/path/to/foo.py\"``.",
	},
	{
	'arg': 'dashboard-prefix',
	'type': str,
	'options': None,
	'default': None,
	'description': "Prefix for the dashboard. Can be a string (like ...) or ``None`` for no prefix.",
	},
	{
	'arg': 'tls-ca-file',
	'type': str,
	'options': None,
	'default': None,
	'description': "CA cert(s) file for TLS (in PEM format). Can be a string (like ``\"path/to/certs\"``), or ``None`` for no certificate(s).",
	},
	{
	'arg': 'tls-cert',
	'type': str,
	'options': None,
	'default': None,
	'description': "certificate file for TLS (in PEM format). Can be a string (like ``\"path/to/certs\"``), or ``None`` for no certificate(s).",
	},
	{
	'arg': 'tls-key',
	'type': str,
	'options': None,
	'default': None,
	'description': "private key file for TLS (in PEM format). Can be a string (like ``\"path/to/certs\"``), or ``None`` for no private key.",
	},
	{
	'arg': ['enable-tcp-over-ucx', 'disable-tcp-over-ucx'],
	'type': 'binary',
	'options': None,
	'default': None,
	'description': "Set environment variables to enable TCP over UCX, even if InfiniBand and NVLink are not supported or disabled.",
	},
	{
	'arg': ['enable-infiniband', 'disable-infiniband'],
	'type': 'binary',
	'options': None,
	'default': None,
	'description': "Set environment variables to enable UCX over InfiniBand, implies ``--enable-tcp-over-ucx`` when enabled.",
	},
	{
	'arg': ['enable-nvlink', 'disable-nvlink'],
	'type': 'binary',
	'options': None,
	'default': None,
	'description': "Set environment variables to enable UCX over NVLink, implies ``--enable-tcp-over-ucx`` when enabled.",
	},
	{
	'arg': ['enable-rdmacm', 'disable-rdmacm'],
	'type': 'binary',
	'options': None,
	'default': None,
	'description': "Set environment variables to enable UCX RDMA connection manager support, requires ``--enable-infiniband``.",
	},
	{
	'arg': ['enable-jit-unspill', 'disable-jit-unspill'],
	'type': 'binary',
	'options': None,
	'default': None,
	'description': "Enable just-in-time unspilling. Can be a boolean or ``None`` to fall back on the  value of ``dask.jit-unspill`` in the local Dask configuration, disabling unspilling if this is not set.\n.. note::     This is experimental and doesn't support memory spilling to disk. See ``proxy_object.ProxyObject`` and ``proxify_host_file.ProxifyHostFile`` for more     info.",
	},
	{
	'arg': 'worker-class',
	'type': str,
	'options': None,
	'default': None,
	'description': "Use a different class than Distributed's default (``distributed.Worker``) to spawn ``distributed.Nanny``.",
	},
	{
	'arg': 'pre-import',
	'type': str,
	'options': None,
	'default': None,
	'description': "Pre-import libraries as a Worker plugin to prevent long import times bleeding through later Dask operations. Should be a list of comma-separated names, such as \"cudf,rmm\".",
	},
	{
	'arg': 'multiprocessing-method',
	'type': 'single-select',
	'options': ['spawn', 'fork', 'forkserver'],
	'default': None,
	'description': "Method used to start new processes with multiprocessing",
	},
]